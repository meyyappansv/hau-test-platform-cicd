//Add logic hear for staging and manual approval before moving to production

@Library('hiper-global-shared-library')
def CODE_CHANGE = false
def CURRENT_VERSION=""
def ROLLBACK_VERSION=""
def LAST_VERSION=""
pipeline {
  agent any

  environment {        // or changelog.md, package.json, etc.
    STORED_VERSION = '.last_live_version.txt' // stored version from last built
    ROLLBACK_VERSION_FILE = '.rollback_live_version.txt' // File that stores the version to rollback to
  }

   parameters {
        booleanParam(name: 'ROLLBACK', defaultValue: false, description: 'Check this if you want to rollback ISO & EXE deployment')
        string( name: 'CODE_VERSION',defaultValue: '',description: 'Enter the code version to deploy. Version format 7.0')
    }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage("Read Code versions"){
      steps {
        script {
         LAST_VERSION = fileExists(env.STORED_VERSION) ? readFile(env.STORED_VERSION).trim() : ''
         ROLLBACK_VERSION = fileExists(env.ROLLBACK_VERSION_FILE) ? readFile(env.ROLLBACK_VERSION_FILE).trim() : ''
         echo "Last known version: ${LAST_VERSION}"
         echo "Rollback Version: ${ROLLBACK_VERSION}"
        }
      }
    }

    stage('Decide if there is a code change'){
      when {
            expression {
            return !params.ROLLBACK
            }
        }
      steps{

          script {
             if (CODE_VERSION == LAST_VERSION) {
            echo "No new version found. Skipping pipeline."
            currentBuild.result = 'NOT_BUILT'
            error("Version unchanged")
          } else {
            
            echo "New version detected: ${CODE_VERSION}"
            CODE_CHANGE = true
            
          }
          }
      }

    }

    //TODO Add a check here to run this stage when DEV flag is checked
    stage('Run ISO Update in Live') {
       when {
            expression {
            return CODE_CHANGE
            }
        }
        steps {
                //TODO Need to add exception handling here
                script {
                    sharedUtils.performISOUpdate('Live',CODE_VERSION)
            }
        }
    }
    //We can only perform one version rollback
    stage('Rollback ISO Update in Live'){
      when {
            expression {
            return  params.ROLLBACK
            }
        }
        steps {
                //TODO Need to add exception handling here
                script {
                    sharedUtils.performISOUpdate('Live',ROLLBACK_VERSION)
                }
                writeFile file: env.STORED_VERSION, text: ROLLBACK_VERSION
                cleanupRollbackISOFile(ROLLBACK_VERSION)

        }

    }

    //TODO If EXE update fails for some reason the ISO update must be rolled back
    stage('Run EXE Update in Live') {
      echo "EXE update in Live"
    }
   
    //Dont need to cleanup ISO files while deploying Live
    stage('Update version files'){
        when {
            expression {
            return !params.ROLLBACK
            }
        }
        steps {
            
            script { 
              def adjustedRollBackVersion=""
              if (ROLLBACK_VERSION == "") {
                echo "Rollback version is empty. Fixing it"
                ROLLBACK_VERSION = CODE_VERSION
              }
              else {
                echo "rollback version is not empty"
                ROLLBACK_VERSION = LAST_VERSION
                echo "Updated rollback version ${ROLLBACK_VERSION}"
              }
              writeFile file: env.STORED_VERSION, text: CODE_VERSION
              writeFile file: env.ROLLBACK_VERSION_FILE, text: ROLLBACK_VERSION
            }
        }
    }
   
}

  post {
    always {
      archiveArtifacts artifacts: '.last_live_version.txt', fingerprint: true
      archiveArtifacts artifacts: '.rollback_live_version.txt', fingerprint: true
    }
  }
}